# -*- coding: utf-8 -*-
"""Data analysis project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xL4NBYkhobig7AgDQJGcVrfaVlXE919u
"""

import pandas as pd
from sklearn.cluster import DBSCAN
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import io 
from sklearn.linear_model import LinearRegression
from sklearn import tree

df = pd.read_csv("employee_attrition_test2.csv")

df.head()

df['BusinessTravel'].value_counts()

df.describe()



"""**Anomaly** **Detection** **algorithem**




"""

# Extract two column for the algorithem and convert them to numpy array
dbscanData = df[['DailyRate','MonthlyIncome']]
dbscanData = dbscanData.values.astype('float32',copy=False)
dbscanData

# potting data before detecting outliears
plt.scatter(dbscanData[:,0], dbscanData[:,1])
plt.show()

# determining the epsilon and min samples per cluster
dbscan = DBSCAN(eps = 150, min_samples = 3)

# fit data to the model
pred = dbscan.fit_predict(dbscanData)
# determine outliers 
outliers = np.where(pred == -1)
values = dbscanData[outliers]
# potting data after detecting outliears
plt.scatter(dbscanData[:,0], dbscanData[:,1])
plt.scatter(values[:,0], values[:,1], color='r')
plt.show()

"""Visualization"""

#get for each Job Rule number of males that work over time and i used histogram to help me use many columns   

x=df.loc[(df["Gender"] == "Male")  &  (df["OverTime"]=='Yes')]
p=sns.histplot(y="JobRole",data=x)
p.set_title("Male Job Rule that work over time")

#get martial status for female that work more than 7 years in company and i used pie chart to clarify percentage of martial status and i have less than 5 columns
y=df.loc[(df["Gender"] == "Female") & (df["TotalWorkingYears"] > 7) ]
arr1 = np.array(y[y["MaritalStatus"]=="Divorced"].count())
arr2 =np.array(y[y["MaritalStatus"]=="Married"].count())
arr3=np.array(y[y["MaritalStatus"]=="Single"].count())
res = []
for i in arr1:
    if i not in res:
        res.append(i)
for i in arr2:
    if i not in res:
        res.append(i)
for i in arr3:
    if i not in res:
        res.append(i)
        
plt.pie(res,labels=["Divorced","Married","Single"],autopct='%1.1f%%')
plt.title("Martial Status for Female")
plt.show()

"""Text **mining**"""

import nltk as nltk
nltk.download('punkt')
nltk.download("vader_lexicon")
from nltk.sentiment import SentimentIntensityAnalyzer

with open('test.txt') as f:
    contents = f.readlines()
for sentence in contents:
    s = SentimentIntensityAnalyzer()
    vs = s.polarity_scores(sentence)
    print(sentence, str(vs))

"""Hosni **part**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
sns.set(color_codes=True )
air = pd.read_csv ('twitter-airline.csv')
air.hist(figsize=(7,7))
sns.pairplot(air)
air=air.dropna()

df.corr()

x = df[['JobLevel']]
y = df['MonthlyIncome']
model = LinearRegression() 
clf = model.fit(x,y)
print( 'Co.fficitnt: ', clf.coef_)
predictions = model.predict(x)
for index in range(len(predictions)):
  print('Actual: ', y[index], '        ','Prtdicttd : ', predictions[index])

a = df['Education'].values.reshape(324,1)
a.shape

x1 = df['Education']
y1 = df['DailyRate']
model = tree.DecisionTreeRegressor()
model.fit(a,y1)
predictions = model.predict(a)
print(model.feature_importances_)
for index in range(len(predictions)):
  print('Actual: ', y1[index], '        ','Prtdicttd : ', predictions[index])

